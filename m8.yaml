apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpserver
spec:
  replicas: 2
  selector:
    matchLabels:
      app: httpserver
  template:
    metadata:
      labels:
        app: httpserver
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "8080"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - httpserver
            topologyKey: "kubernetes.io/hostname"
      initContainers:
        - name: init-httpserver
          image: simdiak/httpserver:latest
          command: ['sh', '-c', 'echo The app is running!']
      containers:
        - name: httpserver
          image: simdiak/httpserver:latest
          imagePullPolicy: Always
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 100Mi
          env:
            - name: HOST
              valueFrom:
                configMapKeyRef:
                  name: httpserver-env
                  key: HOST
            - name: PORT
              valueFrom:
                configMapKeyRef:
                  name: httpserver-env
                  key: PORT
          readinessProbe:
            exec:
              command:
                - cat
                - /tmp/httpserver.pid
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
      imagePullSecrets:
        - name: dockerhub
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: httpserver-env
  namespace: default
data:
  HOST: 0.0.0.0
  PORT: "8080"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: httpserver-tls
  namespace: default
spec:
  ingressClassName: nginx
  rules:
    - host: z.x.ntes.com
      http:
        paths:
          - pathType: Prefix
            backend:
              service:
                name: httpserver
                port:
                  number: 8080
            path: /
  tls:
    - hosts:
      - z.x.ntes.com
      secretName: x-ntes-com
